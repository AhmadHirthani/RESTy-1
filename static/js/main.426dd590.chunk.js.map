{"version":3,"sources":["main/main.js","footer/footer.js","header/header.js","App.js","serviceWorker.js","index.js"],"names":["Main","props","handleMethodclick","e","preventDefault","method","target","value","setState","handleGoClick","state","hits","push","key","length","className","url","handleInput","id","htmlFor","this","onChange","name","onClick","React","Component","Footer","Header","App","Fragment","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"+RA2DeA,G,wDAvDX,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IAOVC,kBAAoB,SAAAC,GAChBA,EAAEC,iBACF,IAAIC,EAASF,EAAEG,OAAOC,MAEtB,EAAKC,SAAS,CAAEH,YAZD,EAcnBI,cAAgB,SAAAN,GACZA,EAAEC,iBAEF,EAAKM,MAAMC,KAAKC,KAAK,wBAAIC,IAAK,EAAKH,MAAMC,KAAKG,OAAS,GACnD,yBAAKC,UAAU,UACX,uBAAGA,UAAU,aAAa,EAAKL,MAAML,QACrC,uBAAGU,UAAU,WAAW,EAAKL,MAAMM,QAG3C,IAAIL,EAAO,EAAKD,MAAMC,KAEtB,EAAKH,SAAS,CAAEG,UAzBD,EA2BnBM,YAAc,SAAAd,GACV,IAAIa,EAAMb,EAAEG,OAAOC,MACnB,EAAKC,SAAS,CAAEQ,SA3BhB,EAAKN,MAAQ,CACTL,OAAQ,MACRW,IAAK,GACLL,KAAM,IALK,E,qDAgCf,OACI,6BACI,8BACI,yBAAKO,GAAG,YACJ,2BAAOC,QAAQ,OAAf,QAA2BC,KAAKV,MAAML,OAAtC,KACA,2BAAOgB,SAAUD,KAAKH,YAAaF,UAAU,MAAMO,KAAK,QACxD,4BAAQC,QAASH,KAAKX,eAAtB,SAEJ,yBAAKS,GAAG,eACJ,4BAAQX,MAAM,MAAMgB,QAASH,KAAKlB,mBAAlC,OACA,4BAAQK,MAAM,OAAOgB,QAASH,KAAKlB,mBAAnC,QACA,4BAAQK,MAAM,MAAMgB,QAASH,KAAKlB,mBAAlC,OACA,4BAAQK,MAAM,SAASgB,QAASH,KAAKlB,mBAArC,YAGR,yBAAKgB,GAAG,eACR,4BAAKE,KAAKV,MAAMC,Y,GAjDba,IAAMC,YCEVC,G,MAFA,kBAAM,sDCONC,G,MAPA,WACX,OACI,gCACI,gDCsEGC,E,uKAVX,OACE,kBAAC,IAAMC,SAAP,KACE,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,W,GANUL,IAAMC,WCnDJK,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SD0HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.426dd590.chunk.js","sourcesContent":["import React from 'react';\nimport './form.scss'\n\nclass Main extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            method: 'GET',\n            url: '',\n            hits: []\n        }\n    }\n    handleMethodclick = e => {\n        e.preventDefault();\n        let method = e.target.value;\n        // update state.words\n        this.setState({ method }); // re-render \n    }\n    handleGoClick = e => {\n        e.preventDefault();\n        // this.state.hits.push(<li key={this.state.hits.length+1}>{`${this.state.method} : ${this.state.url}`}</li>);\n        this.state.hits.push(<li key={this.state.hits.length + 1}>\n            <div className='urlDtl'>\n                <p className='urlMethod'>{this.state.method}</p>\n                <p className='urlItem'>{this.state.url}</p>\n            </div>\n        </li>);\n        let hits = this.state.hits\n        // console.log(this.state.hits);\n        this.setState({ hits })\n    }\n    handleInput = e => {\n        let url = e.target.value\n        this.setState({ url })\n    }\n    render() {\n        return (\n            <div>\n                <form>\n                    <div id='urlPanel'>\n                        <label htmlFor='url'>URL :{this.state.method} </label>\n                        <input onChange={this.handleInput} className='url' name='url' />\n                        <button onClick={this.handleGoClick}>Go !</button>\n                    </div>\n                    <div id='requisPanel'>\n                        <button value='GET' onClick={this.handleMethodclick}>GET</button>\n                        <button value='POST' onClick={this.handleMethodclick}>POST</button>\n                        <button value='PUT' onClick={this.handleMethodclick}>PUT</button>\n                        <button value='DELETE' onClick={this.handleMethodclick}>DELETE</button>\n                    </div>\n                </form>\n                <div id='resultBoard'>\n                <ul>{this.state.hits}</ul>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default Main;","import React from 'react';\nimport './footer.scss';\n\nconst Footer = () => <footer>&copy 2020 401d4</footer>\n\nexport default Footer;\n","import React from 'react';\nimport './header.scss';\n\nconst Header = () => {\n    return (\n        <header>\n            <h1>React Demo!!!</h1>\n        </header>\n    )\n};\nexport default Header;\n","import React from 'react';\nimport Main from './main/main';\nimport Footer from './footer/footer';\nimport Header from './header/header';\n// import './appStyle/header.scss'\n// const Header = () => {\n//   return (\n//     <header>\n//       <style>@import './appStyle/header.scss';</style>\n//       <h1>React Demo!!!</h1>\n//     </header>\n//   )\n// };\n\n// const Footer = () => <footer>&copy 2020 401d4</footer>\n\n//Main\n// class Main extends React.Component {\n//   constructor(props) {\n//     super(props);\n//     this.state ={\n//       method : 'GET',\n//       url : '',\n//       hits:[]\n//     }\n//   }\n//   handleMethodclick = e => {\n//     let method = e.target.value;\n//     // update state.words\n//     this.setState({method}); // re-render \n//   }\n//   handleGoClick = e => {\n//   // this.state.hits.push(<li key={this.state.hits.length+1}>{`${this.state.method} : ${this.state.url}`}</li>);\n//   this.state.hits.push(<li key={this.state.hits.length+1}>\n//     <div>\n//   <p id='urlMethod'>{this.state.method}</p>\n//   <p id='urlItem'>{this.state.url}</p>\n//     </div>\n//   </li>);\n//   let hits = this.state.hits\n//     // console.log(this.state.hits);\n//     this.setState({hits})\n//   }\n//   handleInput = e =>{\n//     let url = e.target.value\n//     this.setState({url})\n//   }\n//   render() {\n//     return (\n//       <div>\n//         <label>URL :{this.state.method} </label>\n//         <input onChange={this.handleInput} className='url' name= 'url' />\n//         <button onClick={this.handleGoClick}>Go !</button>\n//         <button value = 'GET' onClick={this.handleMethodclick}>GET</button>\n//         <button value = 'POST' onClick={this.handleMethodclick}>POST</button>\n//         <button value = 'PUT' onClick={this.handleMethodclick}>PUT</button>\n//         <button value = 'DELETE' onClick={this.handleMethodclick}>DELETE</button>\n//         <ul>{this.state.hits}</ul>\n//       </div>\n//     )\n//   }\n// }\n\n\nclass App extends React.Component {\n  render() {\n    return (\n      <React.Fragment>\n        <Header/>\n        <Main/>\n        <Footer/>\n      </React.Fragment>\n    )\n  }\n}\n\nexport default App;","/* eslint-disable no-undef */\n// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}